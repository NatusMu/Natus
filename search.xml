<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[JWT生成token做登陆校验]]></title>
      <url>%2F2018%2F04%2F16%2FJWT%E7%94%9F%E6%88%90token%E5%81%9A%E7%99%BB%E9%99%86%E6%A0%A1%E9%AA%8C%2F</url>
      <content type="text"><![CDATA[一 JWT简介 JWT(json web token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。 JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。 二 基于session的登录认证 在传统的用户登录认证中，因为http是无状态的，所以都是采用session方式。用户登录成功，服务端会保证一个session，当然会给客户端一个sessionId，客户端会把sessionId保存在cookie中，每次请求都会携带这个sessionId。 三]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[区块链初识]]></title>
      <url>%2F2018%2F04%2F05%2F%E5%8C%BA%E5%9D%97%E9%93%BE%E5%88%9D%E8%AF%86%2F</url>
      <content type="text"><![CDATA[1.区块链的本质是一种特殊的去中心化的分布式数据库 2.区块区块链由一个个block组成， 每个区块包含两个部分区块头（Head）：记录当前区块的特征值区块体（Body）：实际数据 区块头包含了当前区块的多项特征值。 生成时间实际数据（即区块体）的哈希上一个区块的哈希… 3.Hash的不可修改性区块与哈希是一一对应的，每个区块的哈希都是针对”区块头”（Head）计算的。也就是说，把区块头的各项特征值，按照顺序连接在一起，组成一个很长的字符串，再对这个字符串计算哈希。 Hash = SHA256( 区块头 ) 上面就是区块哈希的计算公式，SHA256是区块链的哈希算法。注意，这个公式里面只包含区块头，不包含区块体，也就是说，哈希由区块头唯一决定， 区块头包含很多内容，其中有当前区块体的哈希，还有上一个区块的哈希。这意味着，如果当前区块体的内容变了，或者上一个区块的哈希变了，一定会引起当前区块的哈希改变。 这一点对区块链有重大意义。如果有人修改了一个区块，该区块的哈希就变了。为了让后面的区块还能连到它（因为下一个区块包含上一个区块的哈希），该人必须依次修改后面所有的区块，否则被改掉的区块就脱离区块链了。由于后面要提到的原因，哈希的计算很耗时，短时间内修改多个区块几乎不可能发生，除非有人掌握了全网51%以上的计算能力。 正是通过这种联动机制，区块链保证了自身的可靠性，数据一旦写入，就无法被篡改。这就像历史一样，发生了就是发生了，从此再无法改变。 4.挖矿及难度系数(难度系数动态调节:目标值越来越小)由于必须保证节点之间的同步，所以新区块的添加速度不能太快。比特币的设计是:平均每10分钟，全网才能生成一个新区块，一小时也就六个。 原来不是任意一个哈希都可以，只有满足条件的哈希才会被区块链接受。这个条件特别苛刻，使得绝大部分哈希都不满足要求，必须重算。原来，区块头包含一个难度系数（difficulty），这个值决定了计算哈希的难度。举例来说，第100000个区块的难度系数是 14484.16236122。区块链协议规定，使用一个常量除以难度系数，可以得到目标值（target）。显然，难度系数越大，目标值就越小。哈希的有效性跟目标值密切相关，只有小于目标值的哈希才是有效的，否则哈希无效，必须重算。由于目标值非常小，哈希小于该值的机会极其渺茫，可能计算10亿次，才算中一次。这就是采矿如此之慢的根本原因。当前区块的哈希由区块头唯一决定。如果要对同一个区块反复计算哈希，就意味着，区块头必须不停地变化，否则不可能算出不一样的哈希。区块头里面所有的特征值都是固定的，为了让区块头产生变化，中本聪故意增加了一个随机项，叫做 Nonce。Nonce 是一个随机值，矿工的作用其实就是猜出 Nonce 的值，使得区块头的哈希可以小于目标值，从而能够写入区块链。Nonce 是非常难猜的，目前只能通过穷举法一个个试错。根据协议，Nonce 是一个32位的二进制值，即最大可以到21.47亿。第 100000 个区块的 Nonce 值是274148111，可以理解成，矿工从0开始，一直计算了 2.74 亿次，才得到了一个有效的 Nonce 值，使得算出的哈希能够满足条件。 5.区块链的分叉即使区块链是可靠的，现在还有一个问题没有解决：如果两个人同时向区块链写入数据，也就是说，同时有两个区块加入，因为它们都连着前一个区块，就形成了分叉。这时应该采纳哪一个区块呢？ 现在的规则是，新节点总是采用最长的那条区块链。如果区块链有分叉，将看哪个分支在分叉点后面，先达到6个新区块（称为”六次确认”）。按照10分钟一个区块计算，一小时就可以确认。 6.总结为了保证数据的可靠性，区块链也有自己的代价。一是效率，数据写入区块链，最少要等待十分钟，所有节点都同步数据，则需要更多的时间；二是能耗，区块的生成需要矿工进行无数无意义的计算，这是非常耗费能源的。 区块链的适用场景，其实非常有限。不存在所有成员都信任的管理当局写入的数据不要求实时使用挖矿的收益能够弥补本身的成本如果无法满足上述的条件，那么传统的数据库是更好的解决方案。 目前，区块链最大的应用场景（可能也是唯一的应用场景），就是以比特币为代表的加密货币。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[单例模式]]></title>
      <url>%2F2018%2F03%2F30%2F%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[作为单利模式，有以下几点要求： 1、实例对象必须是private，并且是static的，是private是可以保证安全性 2、构造方法必须是私有的，这样的话就可以避免其他任意调用的情况 3、第三行代码，是公有的、静态的这样的话可以直接通过Singleton .getInstance() 进行调用 一 懒汉模式 - 线程不安全12345678910111213public class Singleton &#123; private static Singleton instance; private Singleton ()&#123; &#125; public static Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125;&#125; 二 懒汉模式 - 线程安全12345678910111213public class Singleton &#123; private static Singleton instance; private Singleton ()&#123; &#125; public static synchronized Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125;&#125; 三 饿汉模式1234567891011public class Singleton &#123; private static Singleton instance = new Singleton(); private Singleton ()&#123; &#125; public static Singleton getInstance() &#123; return instance; &#125;&#125; 四 饿汉模式 - 变种123456789101112131415public class Singleton &#123; private static Singleton instance = null; static &#123; instance = new Singleton(); &#125; private Singleton() &#123; &#125; public static Singleton getInstance() &#123; return instance; &#125;&#125; 五 静态内部类集合了上述的优点， 12345678910111213public class Singleton &#123; private static class SingletonHolder &#123; private static final Singleton INSTANCE = new Singleton(); &#125; private Singleton ()&#123; &#125; public static final Singleton getInstance() &#123; return SingletonHolder.INSTANCE; &#125;&#125; 简单分析一下： 1、可以实现延迟加载的功能，只有在调用getInstance（）的方法才会创建单例对象，并且是通过类加载器机制保证值创建一个单例对象； 2、JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。 3、对于Java类加载机制来说，当第一次访问类的静态字段的时候，会触发类加载，并且同一个类只加载一次。静态内部类也是如此，只会被加载一次，类加载过程由类加载器负责加锁，从而保证线程安全。 六 双重校验锁 DCL不推荐使用，比较繁琐并且低版本的jdk还不能保证执行 12345678910111213141516public class Singleton &#123; private volatile static Singleton singleton; private Singleton ()&#123; &#125; public static Singleton getSingleton() &#123; if (singleton == null) &#123; synchronized (Singleton.class) &#123; if (singleton == null) &#123; singleton = new Singleton(); &#125; &#125; &#125; return singleton; &#125;&#125; 七 枚举12345public enum Singleton &#123; INSTANCE; public void whateverMethod() &#123; &#125; &#125;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[api-rules]]></title>
      <url>%2F2017%2F12%2F20%2Fapi-rules%2F</url>
      <content type="text"><![CDATA[API 设计规范参考 RESTful API 设计指南 腾讯imweb团队API规范 域名https://api.example.com or https://example.com/api/ 使用https协议？ Url 规范 小写字母,不要用大写 单词间使用下划线’_’ 不使用动词，资源要使用名词复数形式，如：user、rooms、tickets 层级大于等于3时，用?参数users/1/address/2/citys (bad)/citys?users=1&amp;address=2; (good) Url 即资源在RESTful架构中，每个网址代表一种资源（resource），所以网址中 不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。 GET /getAllResources (bad)GET /createNewResources (bad)GET /deleteAllResources (bad) GET /users/:id (good)POST /users (good)DELETE /users/:id (good) HTTP 动词GET 从服务器取资源POST 在服务器新建资源PUT 在服务器更新资源（客户端提供完整资源）PATCH 在服务器更新资源（客户端提供部分属性）DELETE 从服务器删除资源 filter?limit=10：指定返回记录的数量?offset=10：指定返回记录的开始位置。?curr=2&amp;per=100：指定第几页，以及每页的记录数。?sort=age: 排序 返回数据123456789101112// 数据模板&#123; "code": 0, "data": &#123;&#125;, "page": &#123; "totalpage": "value", // 总页数 "per":"value", // 每页记录条数 "curr": "value", // 本页页码 "totalcount": "value" // 总记录数 &#125;, "msg": ''&#125; page 属性写在data里更合适？ code: 接口的执行的状态 data: 接口的主数据 page: 当有后端分页时，返回此属性 msg: 当status!=0 都应该有错误信息 *常见状态码 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT - [DELETE]：用户删除数据成功。 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。 实战例子登录&amp;注册相关登入/登出对应的服务端资源应该是session，所以相关api应该如下： GET /session # 获取会话信息POST /session # 创建新的会话（登入）PUT /session # 更新会话信息DELETE /session # 销毁当前会话（登出） 注册对应的资源是user，api如下： GET /users/:id # 获取id用户的信息POST /users # 创建新的用户（注册）PUT /users/:id # 更新id用户的信息DELETE /users/:id # 删除id用户 验证码相关GET /captcha?tel=value # 获取验证码PATCH /catcha?code=value # 进行验证 过滤信息?limit=10：指定返回记录的数量?offset=10：指定返回记录的开始位置。?page=2&amp;per_page=100：指定第几页，以及每页的记录数。?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。?animal_type_id=1：指定筛选条件 ###返回结果 GET /collection：返回资源对象的列表（数组）GET /collection/resource：返回单个资源对象POST /collection：返回新生成的资源对象PUT /collection/resource：返回完整的资源对象PATCH /collection/resource：返回完整的资源对象DELETE /collection/resource：返回一个空文档 各层之间约束###Application层约束 1-list :list batch data2-count :count the result count of query3-show : show a record4-create : insert a record5-update :update a record6-delete :delete a record]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Emmet]]></title>
      <url>%2F2017%2F03%2F24%2FEmmet%20%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[Emmet 教程Emmet教程 优秀的人，不是不合群，而是他们合群的人里面没有你]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[简单的命令行入门]]></title>
      <url>%2F2017%2F03%2F24%2F%E7%AE%80%E5%8D%95%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[Git 全局设置: git config –global user.name “Natus”git config –global user.email “937950943@qq.com”创建 git 仓库: mkdir mblogcd mbloggit inittouch README.mdgit add README.mdgit commit -m “first commit”git remote add origin git@git.oschina.net:Natus/mblog.gitgit push -u origin master已有项目? cd existing_git_repogit remote add origin git@git.oschina.net:Natus/mblog.gitgit push -u origin master 2.Git全局设置git config –globaluser.name “user.name”git config –global user.email “user.email”3.git init //初始化一个git 仓库 touch README.md //创建帮助文件 git add README.md //添加文件 git commit -m “注释内容” // 添加注释 git remote add origin https://git.oschina.net/username/cccc.git 你的远程仓库地址 // 和远程仓库进行关联 git push -u origin master //上传仓库到码云 注意:刷新页面 后,如果是只上传了README文件,需要执行如下操作:a. git add . //添加工程目录下所有文件 (add 和 “.” 之间有空格)b. git commit -m “添加注释信息”c. git push -u origin master //推送要上传的文件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F23%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[简单]]></title>
      <url>%2F2017%2F03%2F17%2F%E7%AE%80%E5%8D%95%2F</url>
      <content type="text"><![CDATA[#一.界面语义化 WebKit 1. header元素定义文档的界面组合,通常是一些引导和导航信息12345678&lt;header&gt; &lt;h1&gt;11111&lt;/h1&gt; &lt;p&gt;123123&lt;/p&gt;&lt;/header&gt;&lt;div class = &quot;header&quot;&gt; &lt;h1&gt;11111&lt;/h1&gt; &lt;p&gt;123123&lt;/p&gt;&lt;/div&gt; 2.footer 元素定义文档或章节的末尾部分,通常包含一些章节的基本信息,如作者信息、相关链接及版权信息。3.nav 元素定义用来构建导航,显示导航链接。例如在页脚显示一个站点的导航链接12345678&lt;footer&gt; ＜nav＞ &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/privacy.html&quot;&gt;隐私信息&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/copyright.html&quot;&gt;版权信息&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;&lt;/footer&gt; 4.aside 元素定义一个界面的区域,用来表示包含和界面相关的主要内容,主要是装载非正文类的内容。 5.article 元素表示文档、界面,用来显示一块独立的文章内容,如博客、新闻等。article标签是可以相互嵌套的。 6.section 元素定义为文档中的节,比如章节、页眉、页脚或文档中的其他部分 7 hgroup 定义为对网页或区段的标题元素进行组合,通常用h1~h6进行分组 更多audio:定义音频内容canvas:定义画布功能command:定义一个命令按钮datalist:定义一个下拉列表details:定义一个元素的详细内容dialog:定义一个对话框keygen:定义表单里一个声称的键值mark:定义有标记的文本output:定义一些输出类型progress:定义任务的过程source:定义媒体资源video:定义一个视频内容]]></content>
    </entry>

    
  
  
</search>
