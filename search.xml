<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[api-rules]]></title>
      <url>%2F2017%2F12%2F20%2Fapi-rules%2F</url>
      <content type="text"><![CDATA[API 设计规范参考 RESTful API 设计指南 腾讯imweb团队API规范 域名https://api.example.com or https://example.com/api/ 使用https协议？ Url 规范 小写字母,不要用大写 单词间使用下划线’_’ 不使用动词，资源要使用名词复数形式，如：user、rooms、tickets 层级大于等于3时，用?参数users/1/address/2/citys (bad)/citys?users=1&amp;address=2; (good) Url 即资源在RESTful架构中，每个网址代表一种资源（resource），所以网址中 不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。 GET /getAllResources (bad)GET /createNewResources (bad)GET /deleteAllResources (bad) GET /users/:id (good)POST /users (good)DELETE /users/:id (good) HTTP 动词GET 从服务器取资源POST 在服务器新建资源PUT 在服务器更新资源（客户端提供完整资源）PATCH 在服务器更新资源（客户端提供部分属性）DELETE 从服务器删除资源 filter?limit=10：指定返回记录的数量?offset=10：指定返回记录的开始位置。?curr=2&amp;per=100：指定第几页，以及每页的记录数。?sort=age: 排序 返回数据123456789101112// 数据模板&#123; "code": 0, "data": &#123;&#125;, "page": &#123; "totalpage": "value", // 总页数 "per":"value", // 每页记录条数 "curr": "value", // 本页页码 "totalcount": "value" // 总记录数 &#125;, "msg": ''&#125; page 属性写在data里更合适？ code: 接口的执行的状态 data: 接口的主数据 page: 当有后端分页时，返回此属性 msg: 当status!=0 都应该有错误信息 *常见状态码 200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。 201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。 202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务） 204 NO CONTENT - [DELETE]：用户删除数据成功。 400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。 401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。 403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。 404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。 406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。 410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。 422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。 500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。 实战例子登录&amp;注册相关登入/登出对应的服务端资源应该是session，所以相关api应该如下： GET /session # 获取会话信息POST /session # 创建新的会话（登入）PUT /session # 更新会话信息DELETE /session # 销毁当前会话（登出） 注册对应的资源是user，api如下： GET /users/:id # 获取id用户的信息POST /users # 创建新的用户（注册）PUT /users/:id # 更新id用户的信息DELETE /users/:id # 删除id用户 验证码相关GET /captcha?tel=value # 获取验证码PATCH /catcha?code=value # 进行验证 过滤信息?limit=10：指定返回记录的数量?offset=10：指定返回记录的开始位置。?page=2&amp;per_page=100：指定第几页，以及每页的记录数。?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。?animal_type_id=1：指定筛选条件 ###返回结果 GET /collection：返回资源对象的列表（数组）GET /collection/resource：返回单个资源对象POST /collection：返回新生成的资源对象PUT /collection/resource：返回完整的资源对象PATCH /collection/resource：返回完整的资源对象DELETE /collection/resource：返回一个空文档 各层之间约束###Application层约束 1-list :list batch data2-count :count the result count of query3-show : show a record4-create : insert a record5-update :update a record6-delete :delete a record]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[ssm整合框架初解]]></title>
      <url>%2F2017%2F12%2F19%2Fssm%E6%95%B4%E5%90%88%E6%A1%86%E6%9E%B6%E5%88%9D%E8%A7%A3%2F</url>
      <content type="text"><![CDATA[1. ApplicationContext.xml配置文件 ioc–依赖注入]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[hadoop与mongodb整合]]></title>
      <url>%2F2017%2F12%2F18%2Fhadoop%E4%B8%8Emongodb%E6%95%B4%E5%90%88%2F</url>
      <content type="text"><![CDATA[MongoDB Connector for Hadoop 1.思考最近在写的一个项目是需要使用Hadoop平台，搭一个分布式mongodb数据库(可能会用为分布式...单机)，首先我考虑到的问题就是如何把数据从]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[相似项]]></title>
      <url>%2F2017%2F12%2F18%2F%E7%9B%B8%E4%BC%BC%E9%A1%B9%2F</url>
      <content type="text"></content>
    </entry>

    
    <entry>
      <title><![CDATA[Emmet]]></title>
      <url>%2F2017%2F03%2F24%2FEmmet%20%E6%95%99%E7%A8%8B%2F</url>
      <content type="text"><![CDATA[Emmet 教程Emmet教程 优秀的人，不是不合群，而是他们合群的人里面没有你]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[简单的命令行入门]]></title>
      <url>%2F2017%2F03%2F24%2F%E7%AE%80%E5%8D%95%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[Git 全局设置: git config –global user.name “Natus”git config –global user.email “937950943@qq.com”创建 git 仓库: mkdir mblogcd mbloggit inittouch README.mdgit add README.mdgit commit -m “first commit”git remote add origin git@git.oschina.net:Natus/mblog.gitgit push -u origin master已有项目? cd existing_git_repogit remote add origin git@git.oschina.net:Natus/mblog.gitgit push -u origin master 2.Git全局设置git config –globaluser.name “user.name”git config –global user.email “user.email”3.git init //初始化一个git 仓库 touch README.md //创建帮助文件 git add README.md //添加文件 git commit -m “注释内容” // 添加注释 git remote add origin https://git.oschina.net/username/cccc.git 你的远程仓库地址 // 和远程仓库进行关联 git push -u origin master //上传仓库到码云 注意:刷新页面 后,如果是只上传了README文件,需要执行如下操作:a. git add . //添加工程目录下所有文件 (add 和 “.” 之间有空格)b. git commit -m “添加注释信息”c. git push -u origin master //推送要上传的文件]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F23%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[简单]]></title>
      <url>%2F2017%2F03%2F17%2F%E7%AE%80%E5%8D%95%2F</url>
      <content type="text"><![CDATA[#一.界面语义化 WebKit 1. header元素定义文档的界面组合,通常是一些引导和导航信息12345678&lt;header&gt; &lt;h1&gt;11111&lt;/h1&gt; &lt;p&gt;123123&lt;/p&gt;&lt;/header&gt;&lt;div class = &quot;header&quot;&gt; &lt;h1&gt;11111&lt;/h1&gt; &lt;p&gt;123123&lt;/p&gt;&lt;/div&gt; 2.footer 元素定义文档或章节的末尾部分,通常包含一些章节的基本信息,如作者信息、相关链接及版权信息。3.nav 元素定义用来构建导航,显示导航链接。例如在页脚显示一个站点的导航链接12345678&lt;footer&gt; ＜nav＞ &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/privacy.html&quot;&gt;隐私信息&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/copyright.html&quot;&gt;版权信息&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt;&lt;/footer&gt; 4.aside 元素定义一个界面的区域,用来表示包含和界面相关的主要内容,主要是装载非正文类的内容。 5.article 元素表示文档、界面,用来显示一块独立的文章内容,如博客、新闻等。article标签是可以相互嵌套的。 6.section 元素定义为文档中的节,比如章节、页眉、页脚或文档中的其他部分 7 hgroup 定义为对网页或区段的标题元素进行组合,通常用h1~h6进行分组 更多audio:定义音频内容canvas:定义画布功能command:定义一个命令按钮datalist:定义一个下拉列表details:定义一个元素的详细内容dialog:定义一个对话框keygen:定义表单里一个声称的键值mark:定义有标记的文本output:定义一些输出类型progress:定义任务的过程source:定义媒体资源video:定义一个视频内容]]></content>
    </entry>

    
  
  
</search>
