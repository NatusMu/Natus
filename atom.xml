<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Natus</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://natus.info:8000/"/>
  <updated>2018-04-16T08:27:27.430Z</updated>
  <id>http://natus.info:8000/</id>
  
  <author>
    <name>Hm.</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JWT生成token做登陆校验</title>
    <link href="http://natus.info:8000/2018/04/16/JWT%E7%94%9F%E6%88%90token%E5%81%9A%E7%99%BB%E9%99%86%E6%A0%A1%E9%AA%8C/"/>
    <id>http://natus.info:8000/2018/04/16/JWT生成token做登陆校验/</id>
    <published>2018-04-16T08:18:19.000Z</published>
    <updated>2018-04-16T08:27:27.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-JWT简介"><a href="#一-JWT简介" class="headerlink" title="一  JWT简介"></a>一  JWT简介</h2><p>　　JWT(json web token)是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准。</p><p>　　JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。　　</p><h2 id="二-基于session的登录认证"><a href="#二-基于session的登录认证" class="headerlink" title="二  基于session的登录认证"></a>二  基于session的登录认证</h2><p>　　在传统的用户登录认证中，因为http是无状态的，所以都是采用session方式。用户登录成功，服务端会保证一个session，当然会给客户端一个sessionId，客户端会把sessionId保存在cookie中，每次请求都会携带这个sessionId。</p><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一-JWT简介&quot;&gt;&lt;a href=&quot;#一-JWT简介&quot; class=&quot;headerlink&quot; title=&quot;一  JWT简介&quot;&gt;&lt;/a&gt;一  JWT简介&lt;/h2&gt;&lt;p&gt;　　JWT(json web token)是为了在网络应用环境间传递声明而执行的一种基于JSON
      
    
    </summary>
    
      <category term="java" scheme="http://natus.info:8000/categories/java/"/>
    
    
      <category term="java" scheme="http://natus.info:8000/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>区块链初识</title>
    <link href="http://natus.info:8000/2018/04/05/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%88%9D%E8%AF%86/"/>
    <id>http://natus.info:8000/2018/04/05/区块链初识/</id>
    <published>2018-04-05T06:35:26.000Z</published>
    <updated>2018-04-05T06:36:38.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-区块链的本质"><a href="#1-区块链的本质" class="headerlink" title="1.区块链的本质"></a>1.区块链的本质</h2><p>是一种特殊的去中心化的分布式数据库</p><h2 id="2-区块"><a href="#2-区块" class="headerlink" title="2.区块"></a>2.区块</h2><p>区块链由一个个block组成，<br><img src="media/15208395217377/bg2017122703.png" alt="bg2017122703"></p><p>每个区块包含两个部分<br>区块头（Head）：记录当前区块的特征值<br>区块体（Body）：实际数据</p><p>区块头包含了当前区块的多项特征值。</p><p>生成时间<br>实际数据（即区块体）的哈希<br>上一个区块的哈希<br>…<br><img src="media/15208395217377/bg2017122704.png" alt="bg2017122704"></p><h2 id="3-Hash的不可修改性"><a href="#3-Hash的不可修改性" class="headerlink" title="3.Hash的不可修改性"></a>3.Hash的不可修改性</h2><p>区块与哈希是一一对应的，每个区块的哈希都是针对”区块头”（Head）计算的。也就是说，把区块头的各项特征值，按照顺序连接在一起，组成一个很长的字符串，再对这个字符串计算哈希。</p><p>Hash = SHA256( 区块头 )</p><p>上面就是区块哈希的计算公式，SHA256是区块链的哈希算法。注意，这个公式里面只包含区块头，不包含区块体，也就是说，哈希由区块头唯一决定，</p><p>区块头包含很多内容，其中有当前区块体的哈希，还有上一个区块的哈希。这意味着，如果当前区块体的内容变了，或者上一个区块的哈希变了，一定会引起当前区块的哈希改变。</p><p>这一点对区块链有重大意义。如果有人修改了一个区块，该区块的哈希就变了。为了让后面的区块还能连到它（因为下一个区块包含上一个区块的哈希），该人必须依次修改后面所有的区块，否则被改掉的区块就脱离区块链了。由于后面要提到的原因，哈希的计算很耗时，短时间内修改多个区块几乎不可能发生，除非有人掌握了全网51%以上的计算能力。</p><p>正是通过这种联动机制，区块链保证了自身的可靠性，数据一旦写入，就无法被篡改。这就像历史一样，发生了就是发生了，从此再无法改变。</p><h2 id="4-挖矿及难度系数-难度系数动态调节-目标值越来越小"><a href="#4-挖矿及难度系数-难度系数动态调节-目标值越来越小" class="headerlink" title="4.挖矿及难度系数(难度系数动态调节:目标值越来越小)"></a>4.挖矿及难度系数(难度系数动态调节:目标值越来越小)</h2><p>由于必须保证节点之间的同步，所以新区块的添加速度不能太快。比特币的设计是:平均每10分钟，全网才能生成一个新区块，一小时也就六个。</p><p>原来不是任意一个哈希都可以，只有满足条件的哈希才会被区块链接受。这个条件特别苛刻，使得绝大部分哈希都不满足要求，必须重算。<br>原来，区块头包含一个难度系数（difficulty），这个值决定了计算哈希的难度。举例来说，第100000个区块的难度系数是 14484.16236122。<br>区块链协议规定，使用一个常量除以难度系数，可以得到目标值（target）。显然，难度系数越大，目标值就越小。<br>哈希的有效性跟目标值密切相关，只有小于目标值的哈希才是有效的，否则哈希无效，必须重算。由于目标值非常小，哈希小于该值的机会极其渺茫，可能计算10亿次，才算中一次。这就是采矿如此之慢的根本原因。<br>当前区块的哈希由区块头唯一决定。如果要对同一个区块反复计算哈希，就意味着，区块头必须不停地变化，否则不可能算出不一样的哈希。区块头里面所有的特征值都是固定的，为了让区块头产生变化，中本聪故意增加了一个随机项，叫做 Nonce。<br>Nonce 是一个随机值，矿工的作用其实就是猜出 Nonce 的值，使得区块头的哈希可以小于目标值，从而能够写入区块链。Nonce 是非常难猜的，目前只能通过穷举法一个个试错。根据协议，Nonce 是一个32位的二进制值，即最大可以到21.47亿。第 100000 个区块的 Nonce 值是274148111，可以理解成，矿工从0开始，一直计算了 2.74 亿次，才得到了一个有效的 Nonce 值，使得算出的哈希能够满足条件。</p><h2 id="5-区块链的分叉"><a href="#5-区块链的分叉" class="headerlink" title="5.区块链的分叉"></a>5.区块链的分叉</h2><p>即使区块链是可靠的，现在还有一个问题没有解决：如果两个人同时向区块链写入数据，也就是说，同时有两个区块加入，因为它们都连着前一个区块，就形成了分叉。这时应该采纳哪一个区块呢？</p><p>现在的规则是，新节点总是采用最长的那条区块链。如果区块链有分叉，将看哪个分支在分叉点后面，先达到6个新区块（称为”六次确认”）。按照10分钟一个区块计算，一小时就可以确认。</p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>为了保证数据的可靠性，区块链也有自己的代价。一是效率，数据写入区块链，最少要等待十分钟，所有节点都同步数据，则需要更多的时间；二是能耗，区块的生成需要矿工进行无数无意义的计算，这是非常耗费能源的。</p><p>区块链的适用场景，其实非常有限。<br>不存在所有成员都信任的管理当局<br>写入的数据不要求实时使用<br>挖矿的收益能够弥补本身的成本<br>如果无法满足上述的条件，那么传统的数据库是更好的解决方案。</p><p>目前，区块链最大的应用场景（可能也是唯一的应用场景），就是以比特币为代表的加密货币。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-区块链的本质&quot;&gt;&lt;a href=&quot;#1-区块链的本质&quot; class=&quot;headerlink&quot; title=&quot;1.区块链的本质&quot;&gt;&lt;/a&gt;1.区块链的本质&lt;/h2&gt;&lt;p&gt;是一种特殊的去中心化的分布式数据库&lt;/p&gt;
&lt;h2 id=&quot;2-区块&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="区块链" scheme="http://natus.info:8000/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
      <category term="区块链" scheme="http://natus.info:8000/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://natus.info:8000/2018/03/30/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://natus.info:8000/2018/03/30/单例模式/</id>
    <published>2018-03-30T05:58:31.000Z</published>
    <updated>2018-03-30T06:01:28.583Z</updated>
    
    <content type="html"><![CDATA[<p>作为单利模式，有以下几点要求：</p><p>1、实例对象必须是private，并且是static的，是private是可以保证安全性</p><p>2、构造方法必须是私有的，这样的话就可以避免其他任意调用的情况</p><p>3、第三行代码，是公有的、静态的这样的话可以直接通过Singleton .getInstance() 进行调用</p><h3 id="一-懒汉模式-线程不安全"><a href="#一-懒汉模式-线程不安全" class="headerlink" title="一 懒汉模式 - 线程不安全"></a>一 懒汉模式 - 线程不安全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance;</div><div class="line">    private Singleton ()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance() &#123;</div><div class="line">        if (instance == null) &#123;</div><div class="line">            instance = new Singleton();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二-懒汉模式-线程安全"><a href="#二-懒汉模式-线程安全" class="headerlink" title="二 懒汉模式 - 线程安全"></a>二 懒汉模式 - 线程安全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance;</div><div class="line">    private Singleton ()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static synchronized Singleton getInstance() &#123;</div><div class="line">        if (instance == null) &#123;</div><div class="line">            instance = new Singleton();</div><div class="line">        &#125;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="三-饿汉模式"><a href="#三-饿汉模式" class="headerlink" title="三 饿汉模式"></a>三 饿汉模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance = new Singleton();</div><div class="line"></div><div class="line">    private Singleton ()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static Singleton getInstance() &#123;</div><div class="line">    return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="四-饿汉模式-变种"><a href="#四-饿汉模式-变种" class="headerlink" title="四 饿汉模式 - 变种"></a>四 饿汉模式 - 变种</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance = null;</div><div class="line"></div><div class="line">    static &#123;</div><div class="line">        instance = new Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Singleton() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance() &#123;</div><div class="line">        return instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="五-静态内部类"><a href="#五-静态内部类" class="headerlink" title="五 静态内部类"></a>五 静态内部类</h3><p>集合了上述的优点，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static class SingletonHolder &#123;</div><div class="line">    private static final Singleton INSTANCE = new Singleton();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Singleton ()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final Singleton getInstance() &#123;</div><div class="line">    return SingletonHolder.INSTANCE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>简单分析一下：</p><p>1、可以实现延迟加载的功能，只有在调用getInstance（）的方法才会创建单例对象，并且是通过类加载器机制保证值创建一个单例对象；</p><p>2、JVM在类的初始化阶段（即在Class被加载后，且被线程使用之前），会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。</p><p>3、对于Java类加载机制来说，当第一次访问类的静态字段的时候，会触发类加载，并且同一个类只加载一次。静态内部类也是如此，只会被加载一次，类加载过程由类加载器负责加锁，从而保证线程安全。</p><h3 id="六-双重校验锁-DCL"><a href="#六-双重校验锁-DCL" class="headerlink" title="六 双重校验锁 DCL"></a>六 双重校验锁 DCL</h3><p>不推荐使用，比较繁琐并且低版本的jdk还不能保证执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private volatile static Singleton singleton;</div><div class="line">    private Singleton ()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    public static Singleton getSingleton() &#123;</div><div class="line">        if (singleton == null) &#123;</div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                if (singleton == null) &#123;</div><div class="line">                    singleton = new Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return singleton;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="七-枚举"><a href="#七-枚举" class="headerlink" title="七 枚举"></a>七 枚举</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public enum Singleton &#123;  </div><div class="line">    INSTANCE;  </div><div class="line">    public void whateverMethod() &#123;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为单利模式，有以下几点要求：&lt;/p&gt;
&lt;p&gt;1、实例对象必须是private，并且是static的，是private是可以保证安全性&lt;/p&gt;
&lt;p&gt;2、构造方法必须是私有的，这样的话就可以避免其他任意调用的情况&lt;/p&gt;
&lt;p&gt;3、第三行代码，是公有的、静态的这样的话可以直
      
    
    </summary>
    
      <category term="设计模式" scheme="http://natus.info:8000/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://natus.info:8000/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Java" scheme="http://natus.info:8000/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>api-rules</title>
    <link href="http://natus.info:8000/2017/12/20/api-rules/"/>
    <id>http://natus.info:8000/2017/12/20/api-rules/</id>
    <published>2017-12-20T07:09:19.000Z</published>
    <updated>2017-12-27T06:22:42.982Z</updated>
    
    <content type="html"><![CDATA[<h1 id="API-设计规范"><a href="#API-设计规范" class="headerlink" title="API 设计规范"></a>API 设计规范</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="external">RESTful API 设计指南</a></p><p><a href="http://imweb.io/topic/5707561f06f2400432c139a5" target="_blank" rel="external">腾讯imweb团队API规范</a></p></blockquote><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p><code>https://api.example.com</code> or <code>https://example.com/api/</code><br><i class="fa fa-pencil-square"></i></p><blockquote><p>使用https协议？</p></blockquote><h2 id="Url-规范"><a href="#Url-规范" class="headerlink" title="Url 规范"></a>Url 规范</h2><ul><li>小写字母,不要用大写</li><li>单词间使用下划线’_’</li><li>不使用动词，资源要使用名词复数形式，如：user、rooms、tickets</li><li>层级大于等于3时，用<code>?</code>参数<br><code>users/1/address/2/citys (bad)</code><br><code>/citys?users=1&amp;address=2; (good)</code></li></ul><h2 id="Url-即资源"><a href="#Url-即资源" class="headerlink" title="Url 即资源"></a>Url 即资源</h2><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中 <strong>不能有动词</strong>，只能有名词，而且所用的名词往往与数据库的表格名对应。<br>一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p><del>GET /getAllResources</del> (bad)<br><del>GET /createNewResources</del> (bad)<br><del>GET /deleteAllResources</del> (bad)</p><p>GET /users/:id (good)<br>POST /users (good)<br>DELETE /users/:id (good)</p><h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><p>GET 从服务器取资源<br>POST 在服务器新建资源<br>PUT 在服务器更新资源（客户端提供完整资源）<br>PATCH 在服务器更新资源（客户端提供部分属性）<br>DELETE 从服务器删除资源</p><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>?limit=10：指定返回记录的数量<br>?offset=10：指定返回记录的开始位置。<br>?curr=2&amp;per=100：指定第几页，以及每页的记录数。<br>?sort=age: 排序</p><h2 id="返回数据"><a href="#返回数据" class="headerlink" title="返回数据"></a>返回数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数据模板</span></div><div class="line">&#123;</div><div class="line">  <span class="string">"code"</span>: <span class="number">0</span>,</div><div class="line">  <span class="string">"data"</span>: &#123;&#125;,</div><div class="line">  <span class="string">"page"</span>: &#123;</div><div class="line">    <span class="string">"totalpage"</span>: <span class="string">"value"</span>, <span class="comment">// 总页数</span></div><div class="line">    <span class="string">"per"</span>:<span class="string">"value"</span>,    <span class="comment">// 每页记录条数</span></div><div class="line">    <span class="string">"curr"</span>: <span class="string">"value"</span>,    <span class="comment">// 本页页码</span></div><div class="line">    <span class="string">"totalcount"</span>: <span class="string">"value"</span> <span class="comment">// 总记录数</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"msg"</span>: <span class="string">''</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>page 属性写在data里更合适？</p></blockquote><p>code: 接口的执行的状态</p><p>data: 接口的主数据</p><p>page: 当有后端分页时，返回此属性</p><p>msg: 当status!=0 都应该有错误信息</p><h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="*常见状态码"></a>*常见状态码</h2><ul><li>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li><li>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</li></ul><h2 id="实战例子"><a href="#实战例子" class="headerlink" title="实战例子"></a>实战例子</h2><h3 id="登录-amp-注册相关"><a href="#登录-amp-注册相关" class="headerlink" title="登录&amp;注册相关"></a>登录&amp;注册相关</h3><p>登入/登出对应的服务端资源应该是session，所以相关api应该如下：</p><p>GET /session # 获取会话信息<br>POST /session # 创建新的会话（登入）<br>PUT /session # 更新会话信息<br>DELETE /session # 销毁当前会话（登出）</p><p>注册对应的资源是user，api如下：</p><p>GET /users/:id # 获取id用户的信息<br>POST /users # 创建新的用户（注册）<br>PUT /users/:id # 更新id用户的信息<br>DELETE /users/:id # 删除id用户</p><h3 id="验证码相关"><a href="#验证码相关" class="headerlink" title="验证码相关"></a>验证码相关</h3><p>GET /captcha?tel=value # 获取验证码<br>PATCH /catcha?code=value # 进行验证</p><h3 id="过滤信息"><a href="#过滤信息" class="headerlink" title="过滤信息"></a>过滤信息</h3><p>?limit=10：指定返回记录的数量<br>?offset=10：指定返回记录的开始位置。<br>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。<br>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。<br>?animal_type_id=1：指定筛选条件</p><p>###返回结果</p><p>GET /collection：返回资源对象的列表（数组）<br>GET /collection/resource：返回单个资源对象<br>POST /collection：返回新生成的资源对象<br>PUT /collection/resource：返回完整的资源对象<br>PATCH /collection/resource：返回完整的资源对象<br>DELETE /collection/resource：返回一个空文档</p><h2 id="各层之间约束"><a href="#各层之间约束" class="headerlink" title="各层之间约束"></a>各层之间约束</h2><p>###Application层约束</p><p>1-list :list batch data<br>2-count :count the result count of query<br>3-show : show a record<br>4-create : insert a record<br>5-update :update a record<br>6-delete :delete a record</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;API-设计规范&quot;&gt;&lt;a href=&quot;#API-设计规范&quot; class=&quot;headerlink&quot; title=&quot;API 设计规范&quot;&gt;&lt;/a&gt;API 设计规范&lt;/h1&gt;&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="api" scheme="http://natus.info:8000/categories/api/"/>
    
    
      <category term="api" scheme="http://natus.info:8000/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Emmet</title>
    <link href="http://natus.info:8000/2017/03/24/Emmet%20%E6%95%99%E7%A8%8B/"/>
    <id>http://natus.info:8000/2017/03/24/Emmet 教程/</id>
    <published>2017-03-24T08:16:00.000Z</published>
    <updated>2017-12-17T14:21:19.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Emmet-教程"><a href="#Emmet-教程" class="headerlink" title="Emmet 教程"></a><center>Emmet 教程</center></h1><center><a href="http://www.iteye.com/news/27580" target="_blank" rel="external">Emmet教程</a></center><!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --><p><blockquote class="blockquote-center">优秀的人，不是不合群，而是他们合群的人里面没有你</blockquote><br><!-- 标签 方式，要求版本在0.4.5或以上 --><br><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/image-url" class="full-image" alt="alt" title="title"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span><br><!-- 别名 --><br><span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="/image-url" class="full-image" alt="alt" title="title"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Emmet-教程&quot;&gt;&lt;a href=&quot;#Emmet-教程&quot; class=&quot;headerlink&quot; title=&quot;Emmet 教程&quot;&gt;&lt;/a&gt;&lt;center&gt;Emmet 教程&lt;/center&gt;&lt;/h1&gt;&lt;center&gt;&lt;a href=&quot;http://www.itey
      
    
    </summary>
    
    
      <category term="Emmet" scheme="http://natus.info:8000/tags/Emmet/"/>
    
      <category term="JavaScript" scheme="http://natus.info:8000/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>简单的命令行入门</title>
    <link href="http://natus.info:8000/2017/03/24/%E7%AE%80%E5%8D%95%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%85%A5%E9%97%A8/"/>
    <id>http://natus.info:8000/2017/03/24/简单的命令行入门/</id>
    <published>2017-03-24T06:02:50.000Z</published>
    <updated>2017-03-24T08:18:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Git 全局设置:</p><p>git config –global user.name “Natus”<br>git config –global user.email “937950943@qq.com”<br>创建 git 仓库:</p><p>mkdir mblog<br>cd mblog<br>git init<br>touch README.md<br>git add README.md<br>git commit -m “first commit”<br>git remote add origin git@git.oschina.net:Natus/mblog.git<br>git push -u origin master<br>已有项目?</p><p>cd existing_git_repo<br>git remote add origin git@git.oschina.net:Natus/mblog.git<br>git push -u origin master</p><p>2.Git全局设置<br>git config –globaluser.name “user.name”<br>git config –global user.email “user.email”<br>3.git init //初始化一个git 仓库</p><ol><li>touch README.md //创建帮助文件</li><li>git add README.md //添加文件</li><li><p>git commit -m “注释内容” // 添加注释</p></li><li><p>git remote add origin <a href="https://git.oschina.net/username/cccc.git" target="_blank" rel="external">https://git.oschina.net/username/cccc.git</a> 你的远程仓库地址 // 和远程仓库进行关联</p></li><li>git push -u origin master //上传仓库到码云</li></ol><p>注意:刷新页面 后,如果是只上传了README文件,需要执行如下操作:<br>a. git add .  //添加工程目录下所有文件 (add 和 “.” 之间有空格)<br>b. git commit -m “添加注释信息”<br>c. git push -u origin master //推送要上传的文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Git 全局设置:&lt;/p&gt;
&lt;p&gt;git config –global user.name “Natus”&lt;br&gt;git config –global user.email “937950943@qq.com”&lt;br&gt;创建 git 仓库:&lt;/p&gt;
&lt;p&gt;mkdir mblo
      
    
    </summary>
    
      <category term="Test" scheme="http://natus.info:8000/categories/Test/"/>
    
    
      <category term="terminal" scheme="http://natus.info:8000/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://natus.info:8000/2017/03/23/hello-world/"/>
    <id>http://natus.info:8000/2017/03/23/hello-world/</id>
    <published>2017-03-23T10:34:33.000Z</published>
    <updated>2017-03-23T10:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>简单</title>
    <link href="http://natus.info:8000/2017/03/17/%E7%AE%80%E5%8D%95/"/>
    <id>http://natus.info:8000/2017/03/17/简单/</id>
    <published>2017-03-16T16:00:00.000Z</published>
    <updated>2017-03-27T13:17:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>#一.界面语义化 WebKit</p><h3 id="1-header元素定义文档的界面组合-通常是一些引导和导航信息"><a href="#1-header元素定义文档的界面组合-通常是一些引导和导航信息" class="headerlink" title="1. header元素定义文档的界面组合,通常是一些引导和导航信息"></a>1. header元素定义文档的界面组合,通常是一些引导和导航信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;header&gt;</div><div class="line">　　　　&lt;h1&gt;11111&lt;/h1&gt;</div><div class="line">　　　　&lt;p&gt;123123&lt;/p&gt;</div><div class="line">&lt;/header&gt;</div><div class="line">&lt;div class = &quot;header&quot;&gt;</div><div class="line">　　　　&lt;h1&gt;11111&lt;/h1&gt;</div><div class="line">　　　　&lt;p&gt;123123&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><h3 id="2-footer-元素定义文档或章节的末尾部分-通常包含一些章节的基本信息-如作者信息、相关链接及版权信息。"><a href="#2-footer-元素定义文档或章节的末尾部分-通常包含一些章节的基本信息-如作者信息、相关链接及版权信息。" class="headerlink" title="2.footer 元素定义文档或章节的末尾部分,通常包含一些章节的基本信息,如作者信息、相关链接及版权信息。"></a>2.footer 元素定义文档或章节的末尾部分,通常包含一些章节的基本信息,如作者信息、相关链接及版权信息。</h3><h3 id="3-nav-元素定义用来构建导航-显示导航链接。例如在页脚显示一个站点的导航链接"><a href="#3-nav-元素定义用来构建导航-显示导航链接。例如在页脚显示一个站点的导航链接" class="headerlink" title="3.nav 元素定义用来构建导航,显示导航链接。例如在页脚显示一个站点的导航链接"></a>3.nav 元素定义用来构建导航,显示导航链接。例如在页脚显示一个站点的导航链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;footer&gt;</div><div class="line">　＜nav＞</div><div class="line">　&lt;ul&gt;</div><div class="line">　&lt;li&gt;&lt;a href=&quot;/privacy.html&quot;&gt;隐私信息&lt;/a&gt;&lt;/li&gt;</div><div class="line">　&lt;li&gt;&lt;a href=&quot;/copyright.html&quot;&gt;版权信息&lt;/a&gt;&lt;/li&gt;</div><div class="line">　&lt;/ul&gt;</div><div class="line">　&lt;/nav&gt;</div><div class="line">&lt;/footer&gt;</div></pre></td></tr></table></figure><h3 id="4-aside-元素定义一个界面的区域-用来表示包含和界面相关的主要内容-主要是装载非正文类的内容。"><a href="#4-aside-元素定义一个界面的区域-用来表示包含和界面相关的主要内容-主要是装载非正文类的内容。" class="headerlink" title="4.aside 元素定义一个界面的区域,用来表示包含和界面相关的主要内容,主要是装载非正文类的内容。"></a>4.aside 元素定义一个界面的区域,用来表示包含和界面相关的主要内容,主要是装载非正文类的内容。</h3><p><img src="media/14841899658028/A8798E95-EAA6-4304-8FB0-8FAC32A6312A.png" alt="A8798E95-EAA6-4304-8FB0-8FAC32A6312A"></p><h3 id="5-article-元素表示文档、界面-用来显示一块独立的文章内容-如博客、新闻等。article标签是可以相互嵌套的。"><a href="#5-article-元素表示文档、界面-用来显示一块独立的文章内容-如博客、新闻等。article标签是可以相互嵌套的。" class="headerlink" title="5.article 元素表示文档、界面,用来显示一块独立的文章内容,如博客、新闻等。article标签是可以相互嵌套的。"></a>5.article 元素表示文档、界面,用来显示一块独立的文章内容,如博客、新闻等。article标签是可以相互嵌套的。</h3><p><img src="media/14841899658028/8FC5CD0C-BE31-476B-BB5F-4BEA01EF2C41.png" alt="8FC5CD0C-BE31-476B-BB5F-4BEA01EF2"></p><h3 id="6-section-元素定义为文档中的节-比如章节、页眉、页脚或文档中的其他部分"><a href="#6-section-元素定义为文档中的节-比如章节、页眉、页脚或文档中的其他部分" class="headerlink" title="6.section 元素定义为文档中的节,比如章节、页眉、页脚或文档中的其他部分"></a>6.section 元素定义为文档中的节,比如章节、页眉、页脚或文档中的其他部分</h3><p><img src="media/14841899658028/54D015EB-FC78-4D78-B602-2CA0E2741B9C.png" alt="54D015EB-FC78-4D78-B602-2CA0E2741B9"></p><h3 id="7-hgroup-定义为对网页或区段的标题元素进行组合-通常用h1-h6进行分组"><a href="#7-hgroup-定义为对网页或区段的标题元素进行组合-通常用h1-h6进行分组" class="headerlink" title="7 hgroup 定义为对网页或区段的标题元素进行组合,通常用h1~h6进行分组"></a>7 hgroup 定义为对网页或区段的标题元素进行组合,通常用h1~h6进行分组</h3><!--![7046A4BD-773B-4FF6-BC14-013AD0330799](media/14841899658028/7046A4BD-773B-4FF6-BC14-013AD0330799.png)--><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>audio:定义音频内容<br>canvas:定义画布功能<br>command:定义一个命令按钮<br>datalist:定义一个下拉列表<br>details:定义一个元素的详细内容<br>dialog:定义一个对话框<br>keygen:定义表单里一个声称的键值<br>mark:定义有标记的文本<br>output:定义一些输出类型<br>progress:定义任务的过程<br>source:定义媒体资源<br>video:定义一个视频内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#一.界面语义化 WebKit&lt;/p&gt;
&lt;h3 id=&quot;1-header元素定义文档的界面组合-通常是一些引导和导航信息&quot;&gt;&lt;a href=&quot;#1-header元素定义文档的界面组合-通常是一些引导和导航信息&quot; class=&quot;headerlink&quot; title=&quot;1. he
      
    
    </summary>
    
      <category term="Test" scheme="http://natus.info:8000/categories/Test/"/>
    
    
      <category term="Test" scheme="http://natus.info:8000/tags/Test/"/>
    
      <category term="Hexo" scheme="http://natus.info:8000/tags/Hexo/"/>
    
  </entry>
  
</feed>
